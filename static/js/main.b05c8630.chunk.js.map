{"version":3,"sources":["components/Redhead/Redhead.js","components/Title/Title.js","components/Wrapper/Wrapper.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Redhead","props","react_default","a","createElement","className","onClick","shuffleAndPoint","id","alt","name","src","image","message","Title","children","Wrapper","Navbar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","this","score","Component","App","state","highscore","pics","shufflePic","console","log","_this","setState","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","findPicById","find","e","onClickIncrease","clickedPic","clicked","_this2","components_Wrapper_Wrapper","components_Navbar_Navbar","components_Title_Title","map","pic","components_Redhead_Redhead","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b05c8630.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Redhead.css\";\n\nconst Redhead = props => (\n  <div className=\"card\" onClick={()=>props.shuffleAndPoint(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n    <h1>{props.message}</h1>\n    <div className=\"content\">\n      <ul>\n        <li>\n          <strong>Name:</strong> {props.name}\n        </li>\n      </ul>\n    </div>\n   \n  </div>\n);\n\nexport default Redhead;\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React,{Component} from \"react\";\nimport './Navbar.css';\n\n\n\nclass Navbar extends Component {\nrender(){\n  return (\n    <div className = \"nav\" >\n\n<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n  <span className=\"navbar-toggler-icon\"></span>\n</button>\n<div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n  <ul className=\"navbar-nav\">\n    <li className=\"nav-item \">\n      <div className=\"nav-link\" >Clicky Game <span className=\"sr-only\">(current)</span></div>\n    </li>\n    <li className=\"nav-item\">\n      <div className=\"nav-link\" >{this.props.message}</div>\n    </li>\n    <li className=\"nav-item\">\n      <div className=\"nav-link\" >Your Score {this.props.score}</div>\n    </li>\n   \n  </ul>\n</div>\n</nav>\n</div>\n  )\n}\n};\n\n\nexport default Navbar;","import React, { Component } from 'react';\nimport Redhead from './components/Redhead';\nimport Title from './components/Title';\nimport Wrapper from './components/Wrapper';\nimport pics from './pics.json';\n// import './App.css';\nimport Navbar from './components/Navbar';\n\nclass App extends Component {\n state = {\n    score: 0,\n    highscore:0,\n    pics,\n    message:\"\"\n };\n// function to shuffle all the pictures\nshufflePic = id => {\n console.log(id)\n this.setState({\n   pics:this.shuffle(this.state.pics)\n  });\n \n};\n\nshuffle = array => {\n  let currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\nfindPicById = id => {\n  // TODO search this.state.pics[] for element matching id\n  // return that element\n return this.state.pics.find(e =>{\n    if(e.id === id){\n      return true\n    } \n  });\n \n};\n\n\n// for the counter to go up and keep the high score\nonClickIncrease= (id)=>{\n  console.log('Image ID:', id);\n  const clickedPic = this.findPicById(id);\n  console.log(\"Clicked Pic:\", clickedPic);\n  if(clickedPic.clicked) {\n    console.log('Has been clicked before');\n      this.setState({\n        score:0,\n        message:\"game over\"\n      });\n    \n  } else {\n    this.setState({ score: this.state.score+1, pics: this.state.pics });\n\n    console.log('Has not been clicked');\n    clickedPic.clicked = true;\n  }\nconsole.log(clickedPic.clicked,\"=====\")\n  console.log(\"=====\",this.state.score);\n};\n// function to reset game\n\n\n\n// single function to run all on click funtions\nshuffleAndPoint=(id)=>{\n  this.shufflePic(id);\n  this.onClickIncrease(id);\n};\n\n\n\n// Map over this.state.friends and render a FriendCard component for each friend object\nrender() {\n  return (\n\n    <Wrapper>\n      <Navbar score = {this.state.score}\n      message = {this.state.message}\n>\n      </Navbar>\n      <Title>Redhead Game </Title>\n\n      {this.state.pics.map(pic => (\n        <Redhead\n          shufflePic={this.shufflePic}\n          shuffleAndPoint = {this.shuffleAndPoint}\n          id={pic.id}\n          key={pic.id}\n          name={pic.name}\n          image={pic.image}\n          message={this.message}\n         \n        />\n      ))}\n    </Wrapper>\n  );\n};\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}